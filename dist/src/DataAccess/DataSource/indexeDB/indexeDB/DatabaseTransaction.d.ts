import { ITableSchema } from "../../../../BusinessLayer/_interface/interface.type.js";
import { Either } from "../../../../Utility/Either/index.js";
import { ConstraintError, TransactionAbortion, TransactionInfo } from "../../../_interface/interface.type.js";
import { IAllDatabaseOperation } from "./DatabaseOperations.js";
import { IOperationResult } from "./ObjectStore.type.js";
export declare class DatabaseTransaction {
    private schema;
    operationQueue: any[];
    isTransactionInProgress: boolean;
    db: IDBDatabase;
    private errorPassive;
    private finishTransactionCallback;
    private IDBTransaction?;
    private IDBTransactionMode?;
    dead: boolean;
    hasWriteTransaction: boolean;
    dedicateTransaction: Boolean;
    transactionInto: Either<TransactionInfo, TransactionAbortion>;
    constructor(tableSchema: ITableSchema, dedicateTransaction: Boolean, errorPassive: Boolean);
    onDone(fn: (result: Either<TransactionInfo, TransactionAbortion>) => void): void;
    startExecution(): void;
    waitToFinish(): Promise<Either<TransactionInfo, TransactionAbortion | ConstraintError>>;
    enqueueOperation(operation: IAllDatabaseOperation): Promise<Either<IOperationResult, false>>;
    private processOperationQueue;
    private finishWithSuccess;
    private runDoneCallBack;
    private executeOperation;
    private abortTransaction;
    private commitTransaction;
    private executeTrigger;
    private setTransactionInfo;
    private setTransactionErrorInfo;
    private clearVariables;
    writeTransactionFlag(): void;
    private createTransaction;
    private closeTransaction;
}
